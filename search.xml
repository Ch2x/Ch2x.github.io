<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>节流与防抖</title>
    <url>/2019/11/03/%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, interval</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> last = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>,</span><br><span class="line">            args = <span class="built_in">arguments</span>,</span><br><span class="line">            now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">if</span>(now - last &gt;= interval) &#123;</span><br><span class="line">            last = now;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>,</span><br><span class="line">            args = <span class="built_in">arguments</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(timer) &#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        timer = setTimout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化debounce</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>,</span><br><span class="line">        args = <span class="built_in">arguments</span>,</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>,</span><br><span class="line">            now = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(now - last &lt; delay) &#123;</span><br><span class="line">            <span class="keyword">if</span>(timer) &#123;</span><br><span class="line">                clearTimeout(timer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            timer = setTimout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                fn.apply(context, args);</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last = now;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>javascript设计模式与开发实践(学习记录)</title>
    <url>/2019/11/03/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5(%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95)/</url>
    <content><![CDATA[<h1 id="javascript设计模式与开发实践"><a href="#javascript设计模式与开发实践" class="headerlink" title="javascript设计模式与开发实践"></a>javascript设计模式与开发实践</h1><p>设计模式一般主题就是把变的部分和不变的部分分隔出来</p>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式是一种常用的模式，有一些对象我们往往只需要一个，比如线程池、全局缓存、浏览器中的 window 对象等。</p>
<p>单例模式的定义是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<p><strong>为什么不用全局变量</strong><br>    它很容易造成命名空间污染，也很容易被不小心覆盖。Douglas Crockford 多次把全局变量称为 JavaScript 中最糟糕的特性。在对 JavaScript 的创造者<br>Brendan Eich 的访谈中， Brendan Eich 本人也承认全局变量是设计上的失误，是在没有足够的时间思考一些东西的情况下导致的结果。</p>
<h4 id="惰性单例指的是在需要的时候才创建对象实例"><a href="#惰性单例指的是在需要的时候才创建对象实例" class="headerlink" title="惰性单例指的是在需要的时候才创建对象实例"></a>惰性单例指的是在需要的时候才创建对象实例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance || instance = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。（比如我们出行，可以选择飞机、火车、汽车等方式相互替代）</p>
<p>一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类 Context，Context 接受客户的请求把请求委托给某一个策略类。</p>
<h4 id="策略模式优点"><a href="#策略模式优点" class="headerlink" title="策略模式优点"></a>策略模式优点</h4><p> 策略模式利用组合、委托和多态等技术和思想，可以有效地避免多重条件选择语句。<br> 策略模式提供了对开放—封闭原则的完美支持，将算法封装在独立的 strategy 中，使得它们易于切换，易于理解，易于扩展。<br> 策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作。<br> 在策略模式中利用组合和委托来让 Context 拥有执行算法的能力，这也是继承的一种更轻便的替代方案。</p>
<h4 id="策略模式缺点"><a href="#策略模式缺点" class="headerlink" title="策略模式缺点"></a>策略模式缺点</h4><p>程序添加许多关于策略的代码、用户需知道代码细节，违反了违反最少知识原则</p>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。<br>代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个替身<br>对象来控制对这个对象的访问，客户实际上访问的是替身对象。替身对象对请求做出一些处理之<br>后，再把请求转交给本体对象。</p>
<p>代理可以是提供虚拟代理，与本体相似</p>
<p>在 JavaScript 开发中最常用的是虚拟代理和缓存代理。虽然代理<br>模式非常有用，但我们在编写业务代码的时候，往往不需要去预先猜测是否需要使用代理模式。<br>当真正发现不方便直接访问某个对象的时候，再编写代理也不迟。</p>
<h5 id="创建缓存代理的工厂"><a href="#创建缓存代理的工厂" class="headerlink" title="创建缓存代理的工厂"></a>创建缓存代理的工厂</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var createProxyFactory = function( fn )&#123;</span><br><span class="line">    var cache = &#123;&#125;;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        var args = Array.prototype.join.call( arguments, &apos;,&apos; );</span><br><span class="line">        if ( args in cache )&#123;</span><br><span class="line">        return cache[ args ];</span><br><span class="line">        &#125;</span><br><span class="line">        return cache[ args ] = fn.apply( this, arguments );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象<br>的内部表示。</p>
<p>迭代器可以分为内部迭代器和外部迭代器，</p>
<p>内部迭代器： 无需关心内部实现，迭代规则已经提前规定（forEach)<br>外部迭代器： 手动控制迭代过程或者顺序（ES6 Iterator）</p>
<p>迭代器模式是一种相对简单的模式，简单到很多时候我们都不认为它是一种设计模式。目前<br>的绝大部分语言都内置了迭代器。</p>
<h3 id="发布—订阅模式"><a href="#发布—订阅模式" class="headerlink" title="发布—订阅模式"></a>发布—订阅模式</h3><p>发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状<br>态发生改变时，所有依赖于它的对象都将得到通知。在 JavaScript 开发中，我们一般用事件模型<br>来替代传统的发布—订阅模式。</p>
<p>推模型是指在事件发生时，发布者一次性把所有更改的状态和数据都推送给订阅者。拉模型不同的地方是，发布者仅仅通知订阅者事件已经发生了，此外发布者要提一些公开的接口供订阅者来主动拉取数据。拉模型的好处是可以让订阅者“按需获取”，但同时有可能让发布者变成一个“门户大开”的对象，同时增加了代码量和复杂度。</p>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>命令模式中的命令（command）指的是一个执行某些<br>特定事情的指令。</p>
<p>跟许多其他语言不同，JavaScript 可以用高阶函数非常方便地实<br>现命令模式。命令模式在 JavaScript 语言中是一种隐形的模式。</p>
<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>组合模式将对象组合成树形结构，以表示“部分整体”的层次结构。</p>
<p><strong>何时使用组合模式</strong><br>    表示对象的部分整体层次结构。组合模式可以方便地构造一棵树来表示对象的部分整<br>体结构。特别是我们在开发期间不确定这棵树到底存在多少层次的时候。在树的构造最<br>终完成之后，只需要通过请求树的最顶层对象，便能对整棵树做统一的操作。在组合模<br>式中增加和删除树的节点非常方便，并且符合开放封闭原则。<br>    客户希望统一对待树中的所有对象。组合模式使客户可以忽略组合对象和叶对象的区别，<br>客户在面对这棵树的时候，不用关心当前正在处理的对象是组合对象还是叶对象，也就<br>不用写一堆 if、else 语句来分别处理它们。组合对象和叶对象会各自做自己正确的事情，<br>这是组合模式最重要的能力。</p>
<h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><p>模板方法模式是一种只需使用继承就可以实现的非常简单的模式。</p>
<p>模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常<br>在抽象父类中封装了子类的算法框架，包括实现一些公共方法以及封装子类中所有方法的执行顺<br>序。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。 </p>
<h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><p>享元（flyweight）模式是一种用于性能优化的模式，“fly”在这里是苍蝇的意思，意为蝇量<br>级。享元模式的核心是运用共享技术来有效支持大量细粒度的对象。</p>
<p>如果系统中因为创建了大量类似的对象而导致内存占用过高，享元模式就非常有用了。在<br>JavaScript 中，浏览器特别是移动端的浏览器分配的内存并不算多，如何节省内存就成了一件非<br>常有意义的事情。</p>
<p>享元模式是为解决性能问题而生的模式，这跟大部分模式的诞生原因都不一样。在一个存在<br>大量相似对象的系统中，享元模式可以很好地解决大量对象带来的性能问题。</p>
<p><strong>何时使用享元模式</strong><br>一个程序中使用了大量的相似对象。<br>由于使用了大量对象，造成很大的内存开销。<br>对象的大多数状态都可以变为外部状态。<br>剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。</p>
<h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><p>无论是作用域链、原型链，还是 DOM 节点中的事件冒泡，我们都能从中找到职责链模式的<br>影子。</p>
<h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>状态模式的关键是区分事物内部的状态，事物内部状态的改变往往会带来事物的行为改变。 </p>
<p>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p>
<p>它们之间的区别是策略模式中的各个策略类之间是平等又平行的，它们之间没有任何联系，<br>所以客户必须熟知这些策略类的作用，以便客户可以随时主动切换算法；而在状态模式中，状态<br>和状态对应的行为是早已被封装好的，状态之间的切换也早被规定完成，“改变行为”这件事情<br>发生在状态模式内部。对客户来说，并不需要了解这些细节。这正是状态模式的作用所在。</p>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><p>适配器模式主要用来解决两个已有接口之间不匹配的问题，它不考虑这些接口是怎样实<br>现的，也不考虑它们将来可能会如何演化。适配器模式不需要改变已有的接口，就能够<br>使它们协同作用。</p>
<h3 id="面向对象设计的原则——单一职责原则"><a href="#面向对象设计的原则——单一职责原则" class="headerlink" title="面向对象设计的原则——单一职责原则"></a>面向对象设计的原则——单一职责原则</h3><p>单一职责原则指的是，就一个类（通常也包括对象和函数等）而言，应该仅有一个引起它变<br>化的原因。如果一个对象承担了多项职责，就意味着这个对象将变得巨大，引起它变化的原因可<br>能会有多个。面向对象设计鼓励将行为分布到细粒度的对象之中，如果一个对象承担的职责过多，<br>等于把这些职责耦合到了一起，这种耦合会导致脆弱和低内聚的设计。当变化发生时，设计可能<br>会遭到意外的破坏。</p>
<h4 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h4><p>对象池维护一个装载空闲对象的池子，如果需要对象的时候，不是直接 new，而是转从对象池里获取。</p>
<h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params"> beforefn </span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> __self = <span class="keyword">this</span>; <span class="comment">// 保存原函数的引用</span></span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 返回包含了原函数和新函数的"代理"函数</span></span><br><span class="line"> beforefn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); <span class="comment">// 执行新函数，且保证 this 不被劫持，新函数接受的参数</span></span><br><span class="line"> <span class="comment">// 也会被原封不动地传入原函数，新函数在原函数之前执行</span></span><br><span class="line"> <span class="keyword">return</span> __self.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); <span class="comment">// 执行原函数并返回原函数的执行结果，</span></span><br><span class="line"> <span class="comment">// 并且保证 this 不被劫持</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params"> afterfn </span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> __self = <span class="keyword">this</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> ret = __self.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line"> afterfn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line"> <span class="keyword">return</span> ret;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
